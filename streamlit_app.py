import streamlit as st
import google.generativeai as genai
from docx import Document
from docx.shared import Pt
import random
import requests  # To call the AI detection API

# Function to apply styles to the text
def set_paragraph_style(paragraph, font_size):
    run = paragraph.runs[0]
    run.font.name = 'Times New Roman'
    run.font.size = Pt(font_size)

# Humanizer function to enhance the text
def humanize_content(text):
    sentences = text.split('. ')
    humanized_sentences = []
    for sentence in sentences:
        if random.random() > 0.7:
            transition_phrases = [
                "Furthermore,", "Additionally,", "Moreover,", "In contrast,", "Consequently,"
            ]
            transition = random.choice(transition_phrases)
            humanized_sentences.append(f"{transition} {sentence.strip()}.")
        else:
            humanized_sentences.append(f"{sentence.strip()}.")
    
    humanized_text = ' '.join(humanized_sentences)
    humanized_text = humanized_text.replace("AI", "artificial intelligence").replace("AI.", "artificial intelligence.")
    
    return humanized_text

# Function to call the AI detection API
def detect_ai_content(text, api_key):
    # Replace this URL with your actual AI detection endpoint
    detection_api_url = "https://api.yourdetectionapi.com/v1/detect"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    response = requests.post(detection_api_url, headers=headers, json={"text": text})
    
    if response.status_code == 200:
        detection_result = response.json()
        # Assume the API returns a JSON object with a 'ai_likelihood' field
        return detection_result.get("ai_likelihood", 0)
    else:
        return None

# Function to generate and save the essay
def generate_and_save_essay(topic, api_key, detection_api_key):
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(f"Write a detailed essay on the topic: {topic}")

    if response.text:
        humanized_content = humanize_content(response.text)
        ai_likelihood = detect_ai_content(humanized_content, detection_api_key)
        
        doc = Document()
        doc.add_heading("Essay Generator with Google Generative AI", level=1)
        set_paragraph_style(doc.paragraphs[-1], 15)
        doc.add_paragraph("This Streamlit app allows users to generate detailed essays using Google Generative AI (Gemini). Users can input their desired topic and receive a comprehensive essay generated by the AI.", style='Normal')
        set_paragraph_style(doc.paragraphs[-1], 11)
        doc.add_heading("Generated Essay:", level=2)
        set_paragraph_style(doc.paragraphs[-1], 14)
        doc.add_paragraph(humanized_content, style='Normal')
        set_paragraph_style(doc.paragraphs[-1], 11)

        # Display the AI likelihood
        if ai_likelihood is not None:
            st.write(f"AI Detection Likelihood: {ai_likelihood * 100:.2f}%")
        else:
            st.error("Failed to detect AI content.")

        file_path = "/mnt/data/Essay_Generator_Output.docx"
        doc.save(file_path)
        return file_path
    else:
        return None

# Streamlit App Title and Description
st.title("Essay Generator with Google Generative AI")
st.write("Enter a topic, and this app will generate a detailed essay for you.")

# Input field for API keys and topic
api_key = "AIzaSyBzP_urPbe1zBnZwgjhSlVl-MWtUQMEqQA"
detection_api_key = st.text_input("Enter your AI Detection API Key", type="password")
topic = st.text_input("Enter the topic for the essay")

# Button to trigger essay generation
if st.button("Generate Essay"):
    if not api_key or not topic or not detection_api_key:
        st.error("Please make sure to enter all fields: Google API Key, AI Detection API Key, and Topic.")
    else:
        output_file_path = generate_and_save_essay(topic, api_key, detection_api_key)
        if output_file_path:
            st.success("Essay generated successfully!")
            st.download_button(label="Download the essay as DOCX", data=open(output_file_path, "rb"), file_name="Essay_Generator_Output.docx")
        else:
            st.error("Failed to generate the essay. Please try again.")
